@page
@model FitTrackPro.Pages.Workouts.BuilderModel

@inject Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json

@{
    ViewData["Title"] = "Workout Builder";
}

<style>
    
    .form-control-modern {
        padding: 0.85rem 1rem;
        font-size: 1rem;
        border-radius: 0.375rem; /* Bootstrap's 'rounded' */
        transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
        
    }

    .form-control-modern:focus {
        border-color: #1b6ec2;
        box-shadow: 0 0 0 0.25rem rgba(27, 110, 194, 0.25);
        outline: 0;
    }

    
    
   .form-select-modern {
        padding-top: 0.85rem;
        padding-bottom: 0.85rem;
        padding-left: 1rem;
        font-size: 1rem; 
        
    }

   
    .form-select-modern:focus {
        border-color: #1b6ec2;
        box-shadow: 0 0 0 0.25rem rgba(27, 110, 194, 0.25);
        outline: 0;
    }


   
    .workout-builder-list {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 0.5rem;
    }

    .builder-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 1rem;
        cursor: pointer;
    }

    .builder-item:hover {
        background-color: #f8f9fa;
    }

    .builder-btn {
        font-size: 1.25rem;
        line-height: 1;
        padding: 0.25rem 0.5rem;
        text-decoration: none;
        background: transparent;
        border: none;
        cursor: pointer;
    }

    .btn-primary-modern {
        color: #fff;
        background-color: #1b6ec2;
        border-color: #1861ac;
        padding: 0.75rem 1.5rem;
        font-size: 1.1rem;
        font-weight: 500;
        border-radius: 0.375rem;
        transition: background-color .15s ease-in-out;
    }

    .btn-primary-modern:hover {
        color: #fff;
        background-color: #1861ac;
    }
</style>

<partial name="_WorkoutNav" />

<h1>@ViewData["Title"]</h1>
<h4>Create a new custom workout routine</h4>
<hr />

<form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="RoutineInput.Name" class="control-label mb-2">Routine Name</label>
                <input asp-for="RoutineInput.Name" class="form-control form-control-modern" />
                <span asp-validation-for="RoutineInput.Name" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="RoutineInput.Description" class="control-label mb-2">Description</label>
                <textarea asp-for="RoutineInput.Description" class="form-control form-control-modern" rows="2"></textarea>
                <span asp-validation-for="RoutineInput.Description" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h5 class="mb-3">Exercise Library</h5>

           <div class="d-flex mb-2">
                <div style="flex-basis: 0; flex-grow: 7;" class="pe-1">
                    <input type="text" id="exercise-search" class="form-control form-control-modern" placeholder="Search by name...">
                </div>
                <div style="flex-basis: 0; flex-grow: 5;" class="ps-1">
                    <select id="muscle-group-filter" class="form-select form-select-modern">
                        </select>
                </div>
            </div>

            <div id="available-exercises-list" class="workout-builder-list">
                </div>
        </div>

        <div class="col-md-6">
            <h5 class="mb-3">Your Routine</h5>
            <div id="selected-exercises-list" class="workout-builder-list">
                </div>
            <div id="selected-exercise-inputs-container"></div>
        </div>
    </div>

    <div class="form-group mt-4 text-center">
        <input type="submit" value="Create Routine" class="btn btn-primary-modern btn-lg" />
    </div>
</form>

<div>
    <a asp-page="Index">Back to Library</a>
</div>


@section Scripts {
        <script>
            document.addEventListener("DOMContentLoaded", function () {

                // 1. Get all data
                const allExercises = @Html.Raw(Json.Serialize(Model.AllExercises));
                let selectedExerciseIds = new Set();

                // 2. Get references to DOM elements
                const availableListEl = document.getElementById('available-exercises-list');
                const selectedListEl = document.getElementById('selected-exercises-list');
                const searchInputEl = document.getElementById('exercise-search');
                const muscleGroupFilterEl = document.getElementById('muscle-group-filter');
                const hiddenInputContainerEl = document.getElementById('selected-exercise-inputs-container');

                // 3. Function to populate the muscle group filter
                function populateMuscleGroupFilter() {
                    const muscleGroups = [...new Set(allExercises.map(ex => ex.muscleGroup))];
                    muscleGroups.sort(); 

                    let filterHtml = '<option value="all">All Muscle Groups</option>';

                    muscleGroups.forEach(group => {
                        filterHtml += `<option value="${group}">${group}</option>`;
                    });

                    muscleGroupFilterEl.innerHTML = filterHtml;
                }

                // 4. Main render function
                function renderLists() {

                    let availableHtml = '';
                    let selectedHtml = '';
                    let hiddenInputsHtml = '';

                    const nameFilter = searchInputEl.value.toLowerCase();
                    const muscleGroupFilter = muscleGroupFilterEl.value; 

                    allExercises.forEach(exercise => {
                        const exerciseNameLower = exercise.name.toLowerCase();

                        if (selectedExerciseIds.has(exercise.id)) {
                            // --- Item is SELECTED ---
                            selectedHtml += `
                                <div class="list-group-item builder-item">
                                    <div>
                                        <strong>${exercise.name}</strong>
                                        <small class="d-block text-muted">${exercise.muscleGroup}</small>
                                    </div>
                                    <button type="button" class="text-danger builder-btn remove-btn" data-id="${exercise.id}" title="Remove">
                                        &times; </button>
                                </div>
                            `;
                            hiddenInputsHtml += 
                                `<input type="hidden" name="SelectedExerciseIds" value="${exercise.id}" />`;

                        } else {
                            // --- Item is NOT selected ---
                            const matchesName = nameFilter === '' || exerciseNameLower.includes(nameFilter);
                            const matchesMuscleGroup = muscleGroupFilter === 'all' || exercise.muscleGroup === muscleGroupFilter;

                            if (matchesName && matchesMuscleGroup) {
                                availableHtml += `
                                    <div class="list-group-item list-group-item-action builder-item add-btn" data-id="${exercise.id}" title="Add">
                                        <div>
                                            <strong>${exercise.name}</strong>
                                            <small class="d-block text-muted">${exercise.muscleGroup}</small>
                                        </div>
                                        <span class="text-success builder-btn">
                                            + </span>
                                    </div>
                                `;
                            }
                        }
                    });

                    availableListEl.innerHTML = availableHtml;
                    selectedListEl.innerHTML = selectedHtml;
                    hiddenInputContainerEl.innerHTML = hiddenInputsHtml;
                }

                // 5. Event Listeners 
                searchInputEl.addEventListener('input', renderLists);
                muscleGroupFilterEl.addEventListener('change', renderLists);

                availableListEl.addEventListener('click', function(e) {
                    const target = e.target.closest('.add-btn');
                    if (target) {
                        e.preventDefault();
                        const id = parseInt(target.dataset.id);
                        selectedExerciseIds.add(id);
                        renderLists(); 
                    }
                });

                selectedListEl.addEventListener('click', function(e) {
                    const target = e.target.closest('.remove-btn');
                    if (target) {
                        e.preventDefault(); 
                        const id = parseInt(target.dataset.id);
                        selectedExerciseIds.delete(id);
                        renderLists(); 
                    }
                });

                // 6. Initial setup
                populateMuscleGroupFilter(); 
                renderLists();
            });
        </script>
}